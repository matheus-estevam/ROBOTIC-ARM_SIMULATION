# =========================
# SIMULA√á√ÉO ROB√ìTICA COM PYBULLET + MQTT
# =========================

# =========================
# IMPORTA√á√ÉO DAS BIBLIOTECAS
# =========================
import pybullet as p               # Biblioteca de simula√ß√£o f√≠sica
import pybullet_data               # Conjunto de modelos padr√£o do PyBullet
import time                        # Controle de tempo
import numpy as np                 # Opera√ß√µes matem√°ticas (vetores, magnitudes, etc.)
import paho.mqtt.client as mqtt    # Comunica√ß√£o MQTT
import json                        # Formata√ß√£o de dados em JSON para enviar ao MQTT


# =========================
# CONFIGURA√á√ÉO DO MQTT
# =========================
broker = "localhost"   # Endere√ßo do broker MQTT (local). Pode ser IP externo se necess√°rio.
port = 1883            # Porta padr√£o MQTT
topic = "robot/status" # T√≥pico para onde os dados do rob√¥ ser√£o publicados

# Criar cliente MQTT e conectar
client = mqtt.Client()
client.connect(broker, port, 60)
client.loop_start()   # Mant√©m o cliente rodando em segundo plano


# =========================
# CONFIGURA√á√ÉO DO PYBULLET
# =========================
p.connect(p.GUI)                           # Abre a interface gr√°fica do PyBullet
p.setAdditionalSearchPath(pybullet_data.getDataPath())  # Permite carregar arquivos URDF padr√£o

# Carrega o plano como base
plane_id = p.loadURDF("plane.urdf")

# Carrega o rob√¥ KUKA iiwa com base fixa
robot_id = p.loadURDF("kuka_iiwa/model.urdf", [0, 0, 0], useFixedBase=True)

# Define a gravidade na simula√ß√£o
p.setGravity(0, 0, -9.8)


# =========================
# CRIA√á√ÉO DE UM OBJETO (CAIXA)
# =========================
box_half_size = 0.25  # Tamanho da caixa (metade do lado)

# Cria a caixa para colis√£o (parte f√≠sica)
box_collision = p.createCollisionShape(p.GEOM_BOX, halfExtents=[box_half_size] * 3)

# Cria a caixa para visualiza√ß√£o (cor vermelha)
box_visual = p.createVisualShape(
    p.GEOM_BOX, halfExtents=[box_half_size] * 3, rgbaColor=[1, 0, 0, 1]
)

# Junta colis√£o + visual + posicionamento no espa√ßo
box_id = p.createMultiBody(
    baseMass=0,                         # Massa zero ‚Üí objeto fixo (n√£o se move)
    baseCollisionShapeIndex=box_collision,
    baseVisualShapeIndex=box_visual,
    basePosition=[0.6, 0, box_half_size] # Posi√ß√£o inicial da caixa
)


# =========================
# CONFIGURA√á√ÉO DOS JOINTS
# =========================
end_effector_index = 6  # √çndice do √∫ltimo elo (ponteira do rob√¥)


# =========================
# DEFINI√á√ÉO DE FUN√á√ïES AUXILIARES
# =========================

# Verifica se a posi√ß√£o desejada est√° dentro da √°rea operacional do rob√¥
def validar_alcance(x, y, z):
    return 0.4 <= x <= 0.8 and -0.3 <= y <= 0.3 and 0.3 <= z <= 0.7

# Verifica se h√° colis√£o entre o rob√¥ e a caixa
def verificar_colisao(robot_id, objeto_id, distancia_segura=0.05):
    pontos = p.getClosestPoints(robot_id, objeto_id, distancia_segura)
    return len(pontos) > 0

# Calcula a magnitude (tamanho) de um vetor (ex.: for√ßa ou torque)
def calcular_magnitude(vetor):
    return np.linalg.norm(vetor)

# Envia os dados do rob√¥ (posi√ß√£o, for√ßa, torque, status de contato) via MQTT em formato JSON
def enviar_status(posicao, forca, torque, contato):
    payload = {
        "posicao": {"x": posicao[0], "y": posicao[1], "z": posicao[2]},
        "forca_N": round(forca, 2),
        "torque_Nm": round(torque, 2),
        "contato": contato,
    }
    client.publish(topic, json.dumps(payload))


# =========================
# LOOP PRINCIPAL DE SIMULA√á√ÉO
# =========================
while True:

    # === L√ä A POSI√á√ÉO ATUAL DA PONTEIRA (end-effector) DO ROB√î ===
    # Essa posi√ß√£o pode ser modificada manualmente na interface com o mouse
    link_state = p.getLinkState(robot_id, end_effector_index)
    target_position = link_state[0]   # Coordenadas (x, y, z) da ponteira
    x, y, z = target_position

    print("\n=== POSI√á√ÉO ATUAL ===")
    print(f"X: {x:.3f} | Y: {y:.3f} | Z: {z:.3f}")

    # === VERIFICA SE A POSI√á√ÉO √â V√ÅLIDA ===
    if not validar_alcance(x, y, z):
        print("‚ùå Posi√ß√£o FORA DO ALCANCE permitido!")
        contato_status = False

    # === VERIFICA COLIS√ÉO COM A CAIXA ===
    elif verificar_colisao(robot_id, box_id):
        print("‚ö†Ô∏è COLIS√ÉO DETECTADA! Movimento travado.")
        contato_status = True

    else:
        # === CALCULA A CINEM√ÅTICA INVERSA ===
        # Cinem√°tica inversa ‚Üí dado um ponto no espa√ßo (x, y, z),
        # retorna os √¢ngulos das juntas necess√°rios para o rob√¥ alcan√ßar esse ponto.
        # A cinem√°tica inversa √© o processo de converter coordenadas cartesianas (posi√ß√£o no espa√ßo) ‚Üí para √¢ngulos de cada junta do rob√¥.
        joint_positions = p.calculateInverseKinematics(
            robot_id, end_effector_index, target_position
        )

        # === APLICA OS √ÇNGULOS CALCULADOS NAS JUNTAS ===
        for i in range(len(joint_positions)):
            p.setJointMotorControl2(
                robot_id,
                i,
                p.POSITION_CONTROL,           # Controle de posi√ß√£o (n√£o de torque direto)
                targetPosition=joint_positions[i], # √Çngulo alvo da junta
                force=500                     # For√ßa m√°xima aplicada no motor
            )

        contato_status = False  # N√£o h√° contato neste momento

    # === AVAN√áA A SIMULA√á√ÉO ===
    p.stepSimulation()
    time.sleep(1.0 / 240.0)  # Delay para simular tempo real

    # === VERIFICA SE H√Å CONTATO ENTRE ROB√î E CAIXA ===
    contact_points = p.getContactPoints(robot_id, box_id)

    if contact_points:
        # Se houver pelo menos um ponto de contato
        for contact in contact_points:
            link_index = contact[3]         # Qual link (elo) do rob√¥ est√° em contato
            force_normal = contact[9]       # For√ßa normal do contato (Newton)
            contact_position = contact[6]   # Posi√ß√£o do ponto de contato no mundo
            contact_normal = contact[7]     # Vetor normal no ponto de contato

            # === Calcula torque devido ao contato ===
            link_state = p.getLinkState(robot_id, link_index)
            link_world_position = link_state[0]

            # Vetor r ‚Üí dist√¢ncia entre centro do link e ponto de contato
            r = np.array(contact_position) - np.array(link_world_position)

            # Vetor for√ßa ‚Üí for√ßa normal aplicada na dire√ß√£o da normal do contato
            force_vector = np.array(contact_normal) * force_normal

            # C√°lculo do torque ‚Üí torque = r √ó F (produto vetorial)
            torque = np.cross(r, force_vector)

            # Calcula magnitude da for√ßa e do torque
            for√ßa_magnitude = calcular_magnitude(force_vector)
            torque_magnitude = calcular_magnitude(torque)

            print("\n=== üü© CONTATO DETECTADO ===")
            print(f"For√ßa total (N): {for√ßa_magnitude:.2f}")
            print(f"Torque total (Nm): {torque_magnitude:.2f}")
            print(f"Na posi√ß√£o: {contact_position}")

            # === Envia dados via MQTT ===
            enviar_status(target_position, for√ßa_magnitude, torque_magnitude, True)
    else:
        # Caso n√£o haja contato
        print("Sem contato")
        enviar_status(target_position, 0, 0, False)

    # === RELAT√ìRIO DE STATUS FINAL ===
    link_state = p.getLinkState(robot_id, end_effector_index)
    posicao_atual = link_state[0]
    print("\n=== STATUS ATUAL ===")
    print(f"Posi√ß√£o do End-Effector: {posicao_atual}")
    print("‚úÖ Sistema operacional.")



# === O que o c√≥digo faz ===
# Controla o rob√¥ KUKA iiwa na simula√ß√£o 3D.
# Verifica colis√µes com uma caixa vermelha.
# Calcula for√ßas e torques gerados no contato.
# Publica esses dados em tempo real via MQTT para um dashboard externo (ex.: Node-RED).
# Permite mover o rob√¥ interativamente pela interface gr√°fica do PyBullet.
